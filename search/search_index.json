{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Jerry Wen's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a Dev Container for Rust","text":"<ul> <li>Primary author: Jerry Wen </li> <li>Reviewer: Anton Sun </li> </ul> <p>Welcome! This guide will walk you through setting up a development container for Rust. By the end of this tutorial, you will have a fully functional environment configured to run Rust and execute a simple \"Hello, World\" program.</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following installed before starting:</p> <ol> <li>GitHub Account: If you don\u2019t have one, create an account at GitHub.</li> <li>Git Version Control: Install Git if it's not already available on your machine.</li> <li>Visual Studio Code: A widely used Integrated Development Environment (IDE) that simplifies container setup.</li> <li>Docker: Required to run development containers.</li> <li>Command-line Basics: If needed, review the CLI concepts from COMP 211.</li> </ol>"},{"location":"tutorials/rust-setup/#tutorial","title":"Tutorial","text":""},{"location":"tutorials/rust-setup/#step-1-creating-a-git-repository","title":"Step 1: Creating a Git Repository","text":"<ol> <li>Open your terminal and navigate to the location where you want to create your project.</li> <li> <p>Run the following commands to set up a new directory and move into it:</p> <pre><code>mkdir rust_dev_container\ncd rust_dev_container\n</code></pre> </li> <li> <p>Initialize a Git repository:</p> <pre><code>git init\n</code></pre> </li> <li> <p>Create a README file to document your project:</p> <pre><code>echo \"# Setting up a development container for Rust\" &gt; README.md\n</code></pre> <p>Track and commit your changes:</p> <pre><code>git add README.md\ngit commit -m \"Adding README.md file as initial commit\"\n</code></pre> </li> <li> <p>Next, connect this local repository to a GitHub remote repository.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#step-2-setting-up-a-remote-repository-on-github","title":"Step 2: Setting Up a Remote Repository on GitHub","text":"<p>Connecting your local repository to a remote GitHub repository allows for collaborative development and automation benefits like CI/CD.</p> <ol> <li>Log into GitHub and create a new repository named rust-dev-container. Add a description if you wish, set the visibility to Public, and ensure no README, .gitignore, or license files are pre-selected.</li> <li> <p>Link your local repository to the remote one by running:</p> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-dev-container.git\n</code></pre> <p>Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> </li> <li> <p>Push your initial commit and establish tracking between the local and remote branches:</p> <pre><code>git push --set-upstream origin main\n</code></pre> </li> </ol>"},{"location":"tutorials/rust-setup/#step-3-setting-up-the-development-container","title":"Step 3: Setting Up the Development Container","text":"<p>A dev container is an isolated environment optimized for software development. We will use VS Code's Dev Containers extension with Docker to create a consistent workspace.</p> <p>Why Use Dev Containers?</p> <p>They streamline onboarding and ensure that every team member works in an identical environment with the required dependencies pre-configured.</p>"},{"location":"tutorials/rust-setup/#steps-to-configure-the-dev-container","title":"Steps to Configure the Dev Container","text":"<ol> <li>Open VS Code and navigate to the rust-dev-container folder.</li> <li>Install the Dev Containers extension.</li> <li>Create a new directory named <code>.devcontainer</code> and inside it, create a file called <code>devcontainer.json</code>.</li> </ol> <p>This file defines settings for the VS Code extension to instruct Docker on setting up the environment. The key fields include:</p> <ul> <li><code>name</code>: A descriptive label for the container.</li> <li><code>image</code>: The base Docker image, specifying the environment for Rust development.</li> <li><code>customizations</code>: Allows additional configurations, such as installing VS Code extensions.</li> <li><code>postCreateCommand</code>: Specifies commands to execute after the container is created, such as updating Rust and checking its version.</li> </ul> <p>Your <code>devcontainer.json</code> file should contain:</p> <pre><code>{\n  \"name\": \"dev container for rust. HELLO COMP423\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:1-1-bullseye\",\n  \"postCreateCommand\": \"rustup update &amp;&amp; rustc --version\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"rust-lang.rust-analyzer\"\n      ]\n    }\n  }\n}\n</code></pre> <ol> <li>To launch the container in VS Code, press CTRL + Shift + P (Windows) or CMD + Shift + P (Mac) and select \"Dev Containers: Reopen in Container\".</li> </ol> <p>Your Rust development environment is now set up!</p>"},{"location":"tutorials/rust-setup/#step-4-creating-and-running-a-rust-project","title":"Step 4: Creating and Running a Rust Project","text":"<ol> <li>In your terminal, generate a new Rust project:</li> </ol> <pre><code>cargo new hello_world --vcs none\n</code></pre> <p>This initializes a Rust project with a default file structure. The <code>--vcs none</code> flag prevents Git from creating another repository inside this project folder.</p> <ol> <li>Navigate into the newly created project directory:</li> </ol> <pre><code>cd hello_world\n</code></pre> <ol> <li>Open <code>src/main.rs</code> and modify it to print a custom message:</li> </ol> <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre> <ol> <li>Compile the project:</li> </ol> <pre><code>cargo build\n</code></pre> <p>This generates a binary executable inside the <code>target/debug/</code> directory. To run it manually, execute:</p> <pre><code>./target/debug/hello_world\n</code></pre> <p>Alternatively, compile and run the project in one step with:</p> <pre><code>cargo run\n</code></pre>"},{"location":"tutorials/rust-setup/#conclusion","title":"Conclusion","text":"<p>To save your work, commit and push your changes to GitHub:</p> <pre><code>git add .\ngit commit -m \"Finished Rust Dev Container\"\ngit push\n</code></pre> <p>You have now successfully set up a Rust development environment within a container, managed through version control. Great job!</p> <p>Citation: Some steps in this tutorial are adapted from Kris Jordan's Starting a Static Website Project with MkDocs.</p>"}]}